// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId           String  @unique
  firstName         String
  secondName        String
  emailAddress      String?
  profilePictureUrl String?

  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]
  team            Team[]
  Project         Project[]
  Task            Task[]
}

model Team {
  id                   String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  teamName             String
  productOwnerUserId   Int?
  projectManagerUserId Int?
  projectTeams         ProjectTeam[]
  user                 User[]
}

model Project {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?   @db.Uuid
  authorsIds  String[]

  tasks        Task[]
  projectTeams ProjectTeam[]
}

model ProjectTeam {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  teamId    String  @db.Uuid
  projectId String  @db.Uuid
  team      Team    @relation(fields: [teamId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
}

model Task {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title          String
  description    String?
  status         String?
  priority       String?
  tags           String?
  startDate      DateTime?
  dueDate        DateTime?
  points         Int?
  imageSrc       String?
  projectId      String    @db.Uuid
  authorUserId   String
  assignedUserId String?
  author         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?   @db.Uuid
  editAuthors    String[]
  createdAt      DateTime  @default(dbgenerated("NOW()"))
  updatedAt      DateTime  @updatedAt

  project         Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]
}

model TaskAssignment {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String @db.Uuid
  taskId String @db.Uuid

  user User @relation(fields: [userId], references: [id])
  task Task @relation(fields: [taskId], references: [id])
}

model Attachment {
  id           String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fileURL      String
  fileName     String?
  taskId       String  @db.Uuid
  uploadedById String  @db.Uuid

  task       Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploadedBy User @relation(fields: [uploadedById], references: [id])
}

model Comment {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text   String
  taskId String  @db.Uuid
  userId String? @unique @db.Uuid

  task Task  @relation(fields: [taskId], references: [id])
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}
